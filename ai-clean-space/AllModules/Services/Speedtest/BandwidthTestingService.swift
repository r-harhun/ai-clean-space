import Foundation
import Combine
import os.log

/// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
public enum BandwidthTestState: Equatable {
    case idle
    case testing
    case successful
    case error(String)
    
    public var localizedDescription: String {
        switch self {
        case .idle:
            return "–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
        case .testing:
            return "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        case .successful:
            return "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        case .error(let message):
            return "–û—à–∏–±–∫–∞: \(message)"
        }
    }
}

/// –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@MainActor
public final class BandwidthTestingService: ObservableObject {
    
    // MARK: - Published Properties
    @Published public private(set) var currentState: BandwidthTestState = .idle
    @Published public private(set) var selectedHost: BandwidthTestHost?
    @Published public private(set) var latencyResult: Int?
    @Published public private(set) var currentDownloadSpeed: BandwidthMeasurement?
    @Published public private(set) var currentUploadSpeed: BandwidthMeasurement?
    @Published public private(set) var isUploading = false
    
    // MARK: - Publishers –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    public let hostUpdated = PassthroughSubject<BandwidthTestHost, Never>()
    public let latencyUpdated = PassthroughSubject<Int, Never>()
    public let downloadSpeedUpdated = PassthroughSubject<BandwidthMeasurement, Never>()
    public let uploadSpeedUpdated = PassthroughSubject<BandwidthMeasurement, Never>()
    public let downloadFinished = PassthroughSubject<BandwidthMeasurement?, Never>()
    public let uploadFinished = PassthroughSubject<BandwidthMeasurement?, Never>()
    
    // MARK: - Private Properties
    private let bandwidthTester = NetworkBandwidthTester()
    private let speedLimitMbps: Double = 5000.0
    private var cancellables = Set<AnyCancellable>()
    private let logger = Logger(subsystem: "com.cleanme.speedtest", category: "BandwidthTestingService")
    
    // MARK: - Singleton
    public static let shared = BandwidthTestingService()
    
    private init() {
        setupBindings()
    }
    
    // MARK: - Public Methods
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç–æ–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
    public var carrierInformation: [CellularNetworkInfo] {
        return CellularInfoProvider().getCellularInformation()
    }
    
    /// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    public func resetTestData() {
        currentState = .idle
        selectedHost = nil
        latencyResult = nil
        currentDownloadSpeed = nil
        currentUploadSpeed = nil
        isUploading = false
        cancellables.removeAll()
    }
    
    /// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    public func startFullBandwidthTest() async {
        guard currentState != .testing else {
            return
        }
        
        resetTestData()
        currentState = .testing
        
        do {
            // 1. –ù–∞–π—Ç–∏ –ª—É—á—à–∏–π —Ö–æ—Å—Ç
            let hostAndLatency = try await findOptimalHost()
            
            await MainActor.run {
                self.selectedHost = hostAndLatency.0
                self.latencyResult = hostAndLatency.1
                self.hostUpdated.send(hostAndLatency.0)
                self.latencyUpdated.send(hostAndLatency.1)
            }
            
            // 2. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            let downloadResult = try await performDownloadTest(host: hostAndLatency.0)
            
            await MainActor.run {
                self.downloadFinished.send(downloadResult)
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            try await Task.sleep(nanoseconds: 450_000_000)
            
            // 3. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
            await MainActor.run {
                self.isUploading = true
            }
            
            let uploadResult = try await performUploadTest(host: hostAndLatency.0)
            
            await MainActor.run {
                self.isUploading = false
                self.uploadFinished.send(uploadResult)
                self.currentState = .successful
            }
            
        } catch {
            await MainActor.run {
                self.isUploading = false
                self.currentState = .error(error.localizedDescription)
            }
        }
    }
    
    /// –ù–∞–π—Ç–∏ –ª—É—á—à–∏–π —Ö–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public func findBestHost() async throws -> BandwidthTestHost {
        logger.info("üîç BandwidthTestingService: –ü–û–ò–°–ö –õ–£–ß–®–ï–ì–û –•–û–°–¢–ê")
        
        logger.info("‚ö° –í—ã–∑–æ–≤ findOptimalHost()...")
        let hostAndLatency = try await findOptimalHost()
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ö–æ—Å—Ç: \(hostAndLatency.0.name) —Å –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é \(hostAndLatency.1)ms")
        
        await MainActor.run {
            logger.info("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–∞–Ω–Ω—ã—Ö...")
            self.selectedHost = hostAndLatency.0
            self.latencyResult = hostAndLatency.1
            self.hostUpdated.send(hostAndLatency.0)
            logger.info("‚úÖ UI –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        }
        
        return hostAndLatency.0
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞
    public func measureLatency() async throws -> Int {
        logger.info("‚ö° BandwidthTestingService: –ò–ó–ú–ï–†–ï–ù–ò–ï –ó–ê–î–ï–†–ñ–ö–ò")
        
        guard let host = selectedHost else {
            logger.error("‚ùå –•–æ—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏")
            throw BandwidthTestError.hostNotFound
        }
        
        logger.info("üì° –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞: \(host.name)")
        return try await withCheckedThrowingContinuation { continuation in
            bandwidthTester.measureLatency(for: host)
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏: \(error)")
                            continuation.resume(throwing: error)
                        }
                    },
                    receiveValue: { [weak self] latency in
                        self?.logger.info("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∞: \(latency)ms")
                        Task { @MainActor in
                            self?.latencyResult = latency
                            self?.latencyUpdated.send(latency)
                        }
                        continuation.resume(returning: latency)
                    }
                )
                .store(in: &cancellables)
        }
    }
    
    // MARK: - Private Methods
    
    private func setupBindings() {
        bandwidthTester.$currentPhase
            .sink { [weak self] phase in
                Task { @MainActor in
                    switch phase {
                    case .idle, .completed:
                        if self?.currentState == .testing {
                            self?.currentState = .successful
                        }
                    case .failed(let error):
                        self?.currentState = .error(error.localizedDescription)
                    default:
                        break
                    }
                }
            }
            .store(in: &cancellables)
    }
    
    private func findOptimalHost() async throws -> (BandwidthTestHost, Int) {
        logger.info("üîç findOptimalHost: –ü–û–ò–°–ö –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –•–û–°–¢–ê")
        
        return try await withCheckedThrowingContinuation { continuation in
            logger.info("‚ö° –í—ã–∑–æ–≤ bandwidthTester.findOptimalHost()...")
            bandwidthTester.findOptimalHost()
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ö–æ—Å—Ç–∞: \(error)")
                            continuation.resume(throwing: error)
                        }
                    },
                    receiveValue: { hostAndLatency in
                        self.logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç: \(hostAndLatency.0.name) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π \(hostAndLatency.1)ms")
                        continuation.resume(returning: hostAndLatency)
                    }
                )
                .store(in: &cancellables)
        }
    }
    
    private func performDownloadTest(host: BandwidthTestHost) async throws -> BandwidthMeasurement {
        let downloadService = DownloadBandwidthService()
        
        return try await withCheckedThrowingContinuation { continuation in
            downloadService.performTest(
                to: host.url,
                dataSize: 80_000_000,
                timeout: 60.0
            ) { [weak self] measurements in
                Task { @MainActor in
                    if measurements.average.isReasonable(maxMbps: self?.speedLimitMbps ?? 5000.0) {
                        self?.currentDownloadSpeed = measurements.average
                        self?.downloadSpeedUpdated.send(measurements.average)
                    }
                }
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        continuation.resume(throwing: error)
                    }
                },
                receiveValue: { result in
                    continuation.resume(returning: result)
                }
            )
            .store(in: &cancellables)
        }
    }
    
    private func performUploadTest(host: BandwidthTestHost) async throws -> BandwidthMeasurement {
        let uploadService = UploadBandwidthService()
        
        return try await withCheckedThrowingContinuation { continuation in
            uploadService.performTest(
                to: host.url,
                dataSize: 80_000_000,
                timeout: 60.0
            ) { [weak self] measurements in
                Task { @MainActor in
                    if measurements.average.isReasonable(maxMbps: self?.speedLimitMbps ?? 5000.0) {
                        self?.currentUploadSpeed = measurements.average
                        self?.uploadSpeedUpdated.send(measurements.average)
                    }
                }
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        continuation.resume(throwing: error)
                    }
                },
                receiveValue: { result in
                    continuation.resume(returning: result)
                }
            )
            .store(in: &cancellables)
        }
    }
}

// MARK: - Compatibility Extensions

public extension BandwidthTestingService {
    /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @available(*, deprecated, message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ findBestHost() —Å async/await")
    func findBestHostForTest(
        bestHost: @escaping (BandwidthTestHost) -> Void,
        error: @escaping (String) -> Void
    ) {
        Task {
            do {
                let host = try await findBestHost()
                bestHost(host)
            } catch let fetchError {
                error(fetchError.localizedDescription)
            }
        }
    }
    
    /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @available(*, deprecated, message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ measureLatency() —Å async/await")
    func makePingTest(
        ping: @escaping (Int) -> Void,
        error: @escaping (String) -> Void
    ) {
        Task {
            do {
                let latency = try await measureLatency()
                ping(latency)
            } catch let fetchError {
                error(fetchError.localizedDescription)
            }
        }
    }
}
