import Foundation
import Combine
import os.log

/// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
@MainActor
public final class BandwidthAnalysisCoordinator: ObservableObject {
    
    // MARK: - Published Properties
    @Published public private(set) var isTestingInProgress = false
    @Published public private(set) var currentHost: BandwidthTestHost?
    @Published public private(set) var currentLatency: Int?
    @Published public private(set) var currentDownloadSpeed: BandwidthMeasurement?
    @Published public private(set) var currentUploadSpeed: BandwidthMeasurement?
    @Published public private(set) var isUploadPhase = false
    
    // MARK: - Event Publishers
    public let hostUpdated = PassthroughSubject<BandwidthTestHost, Never>()
    public let latencyUpdated = PassthroughSubject<Int, Never>()
    public let downloadSpeedUpdated = PassthroughSubject<BandwidthMeasurement, Never>()
    public let uploadSpeedUpdated = PassthroughSubject<BandwidthMeasurement, Never>()
    public let downloadCompleted = PassthroughSubject<BandwidthMeasurement?, Never>()
    public let uploadCompleted = PassthroughSubject<BandwidthMeasurement?, Never>()
    public let testCompleted = PassthroughSubject<Void, Never>()
    
    // MARK: - Private Properties
    private let bandwidthService = BandwidthTestingService.shared
    private let cellularInfoProvider = CellularInfoProvider()
    private var cancellables = Set<AnyCancellable>()
    private let speedFilterLimit: Double = 5000.0
    private let logger = Logger(subsystem: "com.cleanme.speedtest", category: "BandwidthAnalysis")
    
    public init() {
        setupEventBindings()
    }
    
    // MARK: - Public Properties
    
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç–æ–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
    public var carrierInformation: [CellularNetworkInfo] {
        return cellularInfoProvider.getCellularInformation()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    public func startFullBandwidthTest() {
        logger.info("üöÄ BandwidthAnalysisCoordinator: –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê")
        logger.info("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        logger.info("   - isTestingInProgress: \(self.isTestingInProgress)")
        logger.info("   - currentHost: \(String(describing: self.currentHost))")
        
        guard !isTestingInProgress else {
            logger.error("‚ùå Bandwidth Test: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        }
        
        logger.info("üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞...")
        resetTestData()
        isTestingInProgress = true
        
        logger.info("‚ö° –ó–∞–ø—É—Å–∫ Task –¥–ª—è performSequentialTests")
        Task {
            do {
                logger.info("üîß –ù–∞—á–∞–ª–æ performSequentialTests()")
                try await performSequentialTests()
                logger.info("‚úÖ performSequentialTests() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                testCompleted.send()
            } catch {
                logger.error("‚ùå Bandwidth Test Error: \(error.localizedDescription)")
            }
            
            logger.info("üî¥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ isTestingInProgress = false")
            isTestingInProgress = false
        }
    }
    
    /// –ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public func findOptimalHost() async throws {
        isTestingInProgress = true
        defer { isTestingInProgress = false }
        
        let host = try await bandwidthService.findBestHost()
        
        currentHost = host
        hostUpdated.send(host)
        
        logger.debug("Optimal Host Found: \(host.name)")
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    public func measureNetworkLatency() async throws {
        isTestingInProgress = true
        defer { isTestingInProgress = false }
        
        let latency = try await bandwidthService.measureLatency()
        
        currentLatency = latency
        latencyUpdated.send(latency)
        
        logger.debug("Network Latency: \(latency)ms")
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    public func performDownloadSpeedTest() async throws -> BandwidthMeasurement? {
        guard let host = currentHost else {
            throw BandwidthTestError.hostNotFound
        }
        
        isTestingInProgress = true
        defer { isTestingInProgress = false }
        
        let downloadService = DownloadBandwidthService()
        
        return try await withCheckedThrowingContinuation { continuation in
            downloadService.performTest(
                to: host.url,
                dataSize: 80_000_000,
                timeout: 60.0
            ) { [weak self] measurements in
                Task { @MainActor in
                    if measurements.average.isReasonable(maxMbps: self?.speedFilterLimit ?? 5000.0) {
                        self?.currentDownloadSpeed = measurements.average
                        self?.downloadSpeedUpdated.send(measurements.average)
                    }
                }
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        continuation.resume(throwing: error)
                    }
                },
                receiveValue: { [weak self] result in
                    Task { @MainActor in
                        if result.isReasonable(maxMbps: self?.speedFilterLimit ?? 5000.0) {
                            self?.currentDownloadSpeed = result
                            self?.downloadSpeedUpdated.send(result)
                        }
                        self?.downloadCompleted.send(result)
                    }
                    continuation.resume(returning: result)
                }
            )
            .store(in: &cancellables)
        }
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    public func performUploadSpeedTest() async throws -> BandwidthMeasurement? {
        guard let host = currentHost else {
            throw BandwidthTestError.hostNotFound
        }
        
        isTestingInProgress = true
        isUploadPhase = true
        defer { 
            isTestingInProgress = false
            isUploadPhase = false
        }
        
        let uploadService = UploadBandwidthService()
        
        return try await withCheckedThrowingContinuation { continuation in
            uploadService.performTest(
                to: host.url,
                dataSize: 80_000_000,
                timeout: 60.0
            ) { [weak self] measurements in
                Task { @MainActor in
                    if measurements.average.isReasonable(maxMbps: self?.speedFilterLimit ?? 5000.0) {
                        self?.currentUploadSpeed = measurements.average
                        self?.uploadSpeedUpdated.send(measurements.average)
                    }
                }
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        continuation.resume(throwing: error)
                    }
                },
                receiveValue: { [weak self] result in
                    Task { @MainActor in
                        if result.isReasonable(maxMbps: self?.speedFilterLimit ?? 5000.0) {
                            self?.currentUploadSpeed = result
                            self?.uploadSpeedUpdated.send(result)
                        }
                        self?.uploadCompleted.send(result)
                    }
                    continuation.resume(returning: result)
                }
            )
            .store(in: &cancellables)
        }
    }
    
    /// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public func resetTestData() {
        currentHost = nil
        currentLatency = nil
        currentDownloadSpeed = nil
        currentUploadSpeed = nil
        isUploadPhase = false
        cancellables.removeAll()
        
        bandwidthService.resetTestData()
    }
    
    // MARK: - Private Methods
    
    private func setupEventBindings() {
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç BandwidthTestingService
        bandwidthService.hostUpdated
            .sink { [weak self] host in
                self?.currentHost = host
                self?.hostUpdated.send(host)
            }
            .store(in: &cancellables)
        
        bandwidthService.latencyUpdated
            .sink { [weak self] latency in
                self?.currentLatency = latency
                self?.latencyUpdated.send(latency)
            }
            .store(in: &cancellables)
        
        bandwidthService.downloadSpeedUpdated
            .sink { [weak self] speed in
                self?.currentDownloadSpeed = speed
                self?.downloadSpeedUpdated.send(speed)
            }
            .store(in: &cancellables)
        
        bandwidthService.uploadSpeedUpdated
            .sink { [weak self] speed in
                self?.currentUploadSpeed = speed
                self?.uploadSpeedUpdated.send(speed)
            }
            .store(in: &cancellables)
        
        bandwidthService.$isUploading
            .sink { [weak self] isUploading in
                self?.isUploadPhase = isUploading
            }
            .store(in: &cancellables)
    }
    
    private func performSequentialTests() async throws {
        logger.info("üîÑ performSequentialTests: –ù–ê–ß–ê–õ–û –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–• –¢–ï–°–¢–û–í")
        
        // 1. –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
        logger.info("1Ô∏è‚É£ –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞...")
        try await findOptimalHost()
        logger.info("‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –•–æ—Å—Ç –Ω–∞–π–¥–µ–Ω")
        
        // 2. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        logger.info("2Ô∏è‚É£ –≠—Ç–∞–ø 2: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
        try await measureNetworkLatency()
        logger.info("‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∞")
        
        // 3. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        logger.info("3Ô∏è‚É£ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...")
        let downloadResult = try await performDownloadSpeedTest()
        if let downloadResult = downloadResult {
            logger.info("‚úÖ –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω: –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ = \(downloadResult.megabitsPerSecond) Mbps")
        } else {
            logger.warning("‚ö†Ô∏è –≠—Ç–∞–ø 3: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ = nil")
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        logger.info("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (450ms)")
        try await Task.sleep(nanoseconds: 450_000_000)
        
        // 4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.info("4Ô∏è‚É£ –≠—Ç–∞–ø 4: –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏...")
        let uploadResult = try await performUploadSpeedTest()
        if let uploadResult = uploadResult {
            logger.info("‚úÖ –≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏ = \(uploadResult.megabitsPerSecond) Mbps")
        } else {
            logger.warning("‚ö†Ô∏è –≠—Ç–∞–ø 4: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ = nil")
        }
        
        logger.info("üéâ performSequentialTests: –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´")
    }
}

// MARK: - Compatibility Layer –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API

public extension BandwidthAnalysisCoordinator {
    
    /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback API
    @available(*, deprecated, message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ findOptimalHost() —Å async/await")
    func findHost(completion: @escaping (BandwidthTestHost) -> Void) {
        Task {
            do {
                try await findOptimalHost()
                if let host = currentHost {
                    completion(host)
                }
            } catch {
                logger.error("Find Host Error: \(error.localizedDescription)")
            }
        }
    }
    
    /// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback API
    @available(*, deprecated, message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ measureNetworkLatency() —Å async/await")
    func checkPing(completion: @escaping (Int) -> Void) {
        Task {
            do {
                try await measureNetworkLatency()
                if let latency = currentLatency {
                    completion(latency)
                }
            } catch {
                logger.error("Check Ping Error: \(error.localizedDescription)")
            }
        }
    }
}
