//
//  WhitelistService.swift
//  cleanme2
//
//  Created by AI Assistant on 18.08.25.
//

import Foundation
import CoreData
import Combine

@MainActor
final class WhitelistService: ObservableObject {
    
    // MARK: - Published Properties
    @Published var whitelistedEvents: [SystemCalendarEvent] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    // MARK: - Private Properties
    private let userDefaults = UserDefaults.standard
    private let whitelistKey = "whitelistedEvents"
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init() {
        print("üèÅ [WhitelistService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhitelistService")
        loadWhitelistedEvents()
        print("üèÅ [WhitelistService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: \(whitelistedEvents.count)")
    }
    
    // MARK: - Public Methods
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π whitelist (UserDefaults)
    func addToWhitelist(_ event: SystemCalendarEvent) {
        print("üîç [WhitelistService] –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ whitelist:")
        print("üîç [WhitelistService]   - –ù–∞–∑–≤–∞–Ω–∏–µ: '\(event.title)'")
        print("üîç [WhitelistService]   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID: '\(event.eventIdentifier)'")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
        if isEventWhitelisted(event) {
            print("‚ö†Ô∏è [WhitelistService] –°–æ–±—ã—Ç–∏–µ —É–∂–µ –≤ whitelist, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        var eventToAdd = event
        eventToAdd.isWhiteListed = true
        whitelistedEvents.append(eventToAdd)
        saveWhitelistedEvents()
        print("‚úÖ [WhitelistService] –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ UserDefaults")
        print("üîÑ [WhitelistService] Whitelist –æ–±–Ω–æ–≤–ª–µ–Ω, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: \(whitelistedEvents.count)")
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ whitelist (UserDefaults)
    func removeFromWhitelist(_ event: SystemCalendarEvent) {
        let beforeCount = whitelistedEvents.count
        whitelistedEvents.removeAll { $0.eventIdentifier == event.eventIdentifier }
        saveWhitelistedEvents()
        let afterCount = whitelistedEvents.count
        print("üóëÔ∏è [WhitelistService] –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑ whitelist. –î–æ: \(beforeCount), –ü–æ—Å–ª–µ: \(afterCount)")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ whitelist
    func isEventWhitelisted(_ event: SystemCalendarEvent) -> Bool {
        return whitelistedEvents.contains { $0.eventIdentifier == event.eventIdentifier }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ whitelist –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
    func getWhitelistedEventIdentifiers() -> Set<String> {
        let identifiers = Set(whitelistedEvents.map { $0.eventIdentifier })
        print("üîç [WhitelistService.getWhitelistedEventIdentifiers] –í–æ–∑–≤—Ä–∞—â–∞–µ–º \(identifiers.count) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.")
        return identifiers
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å whitelist
    func clearWhitelist() {
        whitelistedEvents = []
        saveWhitelistedEvents()
        print("üßπ [WhitelistService] Whitelist –æ—á–∏—â–µ–Ω")
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É whitelist
    func getWhitelistStatistics() -> WhitelistStatistics {
        let total = whitelistedEvents.count
        let thisWeek = whitelistedEvents.filter { event in
            return Calendar.current.isDate(event.startDate, equalTo: Date(), toGranularity: .weekOfYear)
        }.count
        
        return WhitelistStatistics(total: total, addedThisWeek: thisWeek)
    }
    
    // MARK: - Private Methods
    
    private func saveWhitelistedEvents() {
        do {
            let encodedData = try JSONEncoder().encode(whitelistedEvents)
            userDefaults.set(encodedData, forKey: whitelistKey)
        } catch {
            print("‚ùå [WhitelistService] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: \(error.localizedDescription)")
            errorMessage = "Failed to save whitelist: \(error.localizedDescription)"
        }
    }
    
    private func loadWhitelistedEvents() {
        isLoading = true
        errorMessage = nil
        
        if let savedData = userDefaults.data(forKey: whitelistKey) {
            do {
                whitelistedEvents = try JSONDecoder().decode([SystemCalendarEvent].self, from: savedData)
                print("üîÑ [WhitelistService.loadWhitelistedEvents] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –∏–∑ UserDefaults: \(whitelistedEvents.count)")
            } catch {
                print("‚ùå [WhitelistService.loadWhitelistedEvents] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: \(error.localizedDescription)")
                errorMessage = "Failed to load whitelist: \(error.localizedDescription)"
                whitelistedEvents = []
            }
        } else {
            whitelistedEvents = []
            print("üîÑ [WhitelistService.loadWhitelistedEvents] UserDefaults –ø—É—Å—Ç")
        }
        
        isLoading = false
    }
}

// MARK: - Supporting Models

struct WhitelistStatistics {
    let total: Int
    let addedThisWeek: Int
}
